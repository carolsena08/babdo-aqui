<script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- VARIÁVEIS GLOBAIS E SELETORES DO DOM ---
            const contentArea = document.getElementById('content-area');
            const navTabs = document.querySelectorAll('.nav-tab');
            const dateEl = document.getElementById('current-date');
            const novaReceitaModal = document.getElementById('nova-receita-modal');
            const addRevenueForm = document.getElementById('add-revenue-form');
            const profileToggle = document.getElementById('profile-toggle');
            const dropdownMenu = document.getElementById('profile-dropdown-menu');
            const transactionTypeSelect = document.getElementById('transaction-type');

            let cashflowChartInstance;
            let expensesChartInstance;
            let relatoriosData = []; // Armazenará os dados da API

            // --- LÓGICA DE INICIALIZAÇÃO ---
            if (dateEl) {
                dateEl.textContent = new Date().toLocaleDateString('pt-BR', { day: 'numeric', month: 'long' });
            }

            // --- LÓGICA DE DADOS (API) ---

            // NOVA FUNÇÃO para buscar alunos do seu backend (que busca no Asaas)
            const getAlunos = async () => {
                try {
                    const response = await fetch('/api/alunos');
                    if (!response.ok) {
                        throw new Error('Falha ao buscar dados dos alunos');
                    }
                    return await response.json();
                } catch (error) {
                    console.error(error);
                    return []; 
                }
            };

            // NOVA FUNÇÃO para buscar relatórios do seu backend (que busca no Asaas)
            async function fetchRelatorios() {
                try {
                    // Esta rota agora só retorna RECEITAS do Asaas
                    const response = await fetch('/api/transacoes');
                    if (!response.ok) {
                        throw new Error('Falha ao buscar dados de transações');
                    }
                    const data = await response.json();
                    relatoriosData = data; 
                    return data;
                } catch (error) {
                    console.error(error);
                    relatoriosData = [];
                    return [];
                }
            }

            // --- TEMPLATES HTML (Seu HTML original) ---
            const dashboardTemplate = `
                <div class="space-y-6">
                    <section>
                        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                            <div class="bg-white p-6 rounded-lg shadow-sm flex items-center gap-4">
                                <div class="bg-green-100 p-3 rounded-full"><i class="fas fa-arrow-up text-green-600 text-2xl"></i></div>
                                <div>
                                    <h3 class="text-md font-semibold text-gray-500">Receita Total (Mês)</h3>
                                    <p class="text-2xl font-bold text-green-600" id="total-revenue">R$ 0,00</p>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-lg shadow-sm flex items-center gap-4">
                                <div class="bg-red-100 p-3 rounded-full"><i class="fas fa-arrow-down text-red-600 text-2xl"></i></div>
                                <div>
                                    <h3 class="text-md font-semibold text-gray-500">Despesas Totais (Mês)</h3>
                                    <p class="text-2xl font-bold text-red-600">R$ 0,00</p>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-lg shadow-sm flex items-center gap-4">
                                <div class="bg-blue-100 p-3 rounded-full"><i class="fas fa-balance-scale text-blue-600 text-2xl"></i></div>
                                <div>
                                    <h3 class="text-md font-semibold text-gray-500">Lucro Líquido (Mês)</h3>
                                    <p class="text-2xl font-bold text-brand-text" id="net-profit">R$ 0,00</p>
                                </div>
                            </div>
                            <div class="bg-white p-6 rounded-lg shadow-sm flex items-center gap-4">
                                <div class="bg-yellow-100 p-3 rounded-full"><i class="fas fa-users text-yellow-600 text-2xl"></i></div>
                                <div>
                                    <h3 class="text-md font-semibold text-gray-500">Alunos Ativos</h3>
                                    <p class="text-2xl font-bold text-brand-text" id="active-students">0</p>
                                </div>
                            </div>
                        </div>
                    </section>
                    <section class="grid grid-cols-1 lg:grid-cols-5 gap-6">
                        <div class="lg:col-span-3 bg-white p-6 rounded-lg shadow-sm flex flex-col">
                            <h3 class="text-xl font-semibold mb-4 text-brand-text">Fluxo de Caixa (Últimos 6 meses)</h3>
                            <div class="relative flex-1 min-h-[300px]"><canvas id="cashflow-chart"></canvas></div>
                        </div>
                        <div class="lg:col-span-2 bg-white p-6 rounded-lg shadow-sm flex flex-col">
                            <h3 class="text-xl font-semibold mb-4 text-brand-text">Distribuição de Despesas</h3>
                            <div class="relative flex-1 min-h-[300px]"><canvas id="expenses-chart"></canvas></div>
                        </div>
                    </section>
                     <section class="bg-white p-6 rounded-lg shadow-sm">
                        <h3 class="text-xl font-semibold mb-4 text-brand-text">Atividade Recente</h3>
                        <div class="overflow-x-auto">
                            <table class="w-full text-left">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="p-3 font-semibold text-sm">Descrição</th>
                                        <th class="p-3 font-semibold text-sm">Data</th>
                                        <th class="p-3 font-semibold text-sm">Tipo</th>
                                        <th class="p-3 font-semibold text-sm text-right">Valor</th>
                                    </tr>
                                </thead>
                                <tbody id="recent-activity-body"></tbody>
                            </table>
                        </div>
                    </section>
                </div>`;
            const alunosTemplate = `<div class="bg-white p-6 rounded-lg shadow-sm h-full"><h2 class="text-2xl font-bold mb-4 text-brand-text">Situação Financeira dos Alunos</h2><div class="overflow-x-auto"><table class="w-full text-left"><thead class="bg-gray-100"><tr><th class="p-3">Nome do Aluno</th><th class="p-3">Responsável</th><th class="p-3">Mensalidade</th><th class="p-3">Vencimento</th><th class="p-3">Status da Mensalidade</th></tr></thead><tbody id="alunos-table-body"></tbody></table></div></div>`;
            const relatoriosTemplate = `<div class="bg-white p-6 rounded-lg shadow-sm h-full"><div class="flex justify-between items-center mb-4"><h2 class="text-2xl font-bold text-brand-text">Relatório Financeiro Detalhado</h2><button id="btn-novo-lancamento" class="bg-brand-green-dark text-white px-4 py-2 rounded-md hover:bg-brand-text flex items-center gap-2"><i class="fas fa-plus"></i>Novo Lançamento</button></div><div class="overflow-x-auto"><table class="w-full text-left"><thead class="bg-gray-100"><tr><th class="p-3">Data</th><th class="p-3">Descrição</th><th class="p-3">Categoria</th><th class="p-3">Valor</th><th class="p-3">Tipo</th><th class="p-3">Ações</th></tr></thead><tbody id="relatorios-table-body"></tbody></table></div></div>`;
            const historicoTemplate = `<div class="bg-white p-6 rounded-lg shadow-sm h-full"><h2 class="text-2xl font-bold mb-4 text-brand-text">Histórico de Relatórios Arquivados</h2><div class="overflow-x-auto"><table class="w-full text-left"><thead class="bg-gray-100"><tr><th class="p-3">Data</th><th class="p-3">Descrição</th><th class="p-3">Categoria</th><th class="p-3">Valor</th><th class="p-3">Tipo</th><th class="p-3">Ações</th></tr></thead><tbody id="historico-table-body"></tbody></table></div></div>`;
            
            // --- FUNÇÕES DE RENDERIZAÇÃO E LÓGICA DE UI ---
            function setupCharts() { /* ...Sua lógica de gráficos... */ }
            
            async function renderRecentActivity() {
                const tbody = document.getElementById('recent-activity-body');
                if (!tbody) return;
                
                // Pega os 5 lançamentos mais recentes
                const recentData = relatoriosData.slice(0, 5);
                tbody.innerHTML = '';
                if (recentData.length === 0) {
                    tbody.innerHTML = `<tr><td colspan="4" class="p-4 text-center text-gray-500">Nenhuma atividade recente.</td></tr>`;
                    return;
                }
                recentData.forEach(item => {
                    const valueClass = 'text-green-600'; // Só temos receitas
                    const formattedValue = `R$ ${item.value.toFixed(2).replace('.', ',')}`;
                    const row = `<tr class="border-b"><td class="p-3">${item.description}</td><td class="p-3">${new Date(item.date).toLocaleDateString('pt-BR')}</td><td class="p-3"><span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-700">${item.type}</span></td><td class="p-3 font-medium text-right ${valueClass}">${formattedValue}</td></tr>`;
                    tbody.innerHTML += row;
                });
            }

            async function renderAlunos() {
                const alunos = await getAlunos(); // <-- Busca dados reais
                const tbody = document.getElementById('alunos-table-body');
                if (!tbody) return;
                tbody.innerHTML = '';
                const statusClasses = { pago: 'bg-green-100 text-green-700', pendente: 'bg-yellow-100 text-yellow-700', atrasado: 'bg-red-100 text-red-700' };
                
                if (alunos.length === 0) {
                     tbody.innerHTML = `<tr><td colspan="5" class="p-4 text-center text-gray-500">Nenhum aluno cadastrado no Asaas.</td></tr>`;
                     return;
                }
                
                alunos.forEach(aluno => {
                    const status = aluno.status || 'pago'; // Exemplo
                    const statusText = status.charAt(0).toUpperCase() + status.slice(1);
                    const row = `<tr>
                        <td class="p-3">${aluno.studentName}</td>
                        <td class="p-3">${aluno.parentName}</td>
                        <td class="p-3">R$ ${aluno.mensalidade.toFixed(2).replace('.', ',')}</td>
                        <td class="p-3">${aluno.vencimento}</td>
                        <td class="p-3"><span class="px-2 py-1 rounded-full text-sm font-medium ${statusClasses[status]}">${statusText}</span></td>
                    </tr>`;
                    tbody.innerHTML += row;
                });

                // Atualiza o card da Visão Geral
                const activeStudentsEl = document.getElementById('active-students');
                if (activeStudentsEl) activeStudentsEl.textContent = alunos.length;
            }

            function renderRelatorios(filterStatus = 'ativo') {
                const tbodyId = filterStatus === 'ativo' ? 'relatorios-table-body' : 'historico-table-body';
                const tbody = document.getElementById(tbodyId);
                if(!tbody) return;
                
                // Filtra os dados (só temos 'ativo' e 'pendente' do Asaas por enquanto)
                const relatorios = relatoriosData.filter(r => (filterStatus === 'ativo' ? (r.status === 'ativo' || r.status === 'pendente') : (r.status === 'arquivado')))
                                                 .sort((a, b) => new Date(b.date) - new Date(a.date));

                tbody.innerHTML = '';

                if (relatorios.length === 0) {
                     tbody.innerHTML = `<tr><td colspan="6" class="p-4 text-center text-gray-500">Nenhum lançamento encontrado.</td></tr>`;
                     return;
                }

                relatorios.forEach(item => {
                    const valueClass = 'text-green-600'; // Só receitas
                    const actionButton = `<button data-id="${item.id}" class="archive-btn text-yellow-600 hover:underline">Arquivar</button>`;
                    const row = `<tr>
                        <td class="p-3">${new Date(item.date).toLocaleDateString('pt-BR')}</td>
                        <td class="p-3">${item.description}</td>
                        <td class="p-3">${item.category}</td>
                        <td class="p-3 font-medium ${valueClass}">R$ ${item.value.toFixed(2).replace('.',',')}</td>
                        <td class="p-3">${item.type}</td>
                        <td class="p-3">${actionButton}</td>
                    </tr>`;
                    tbody.innerHTML += row;
                });
            }

            // Atualiza os cards da Visão Geral com dados reais
            function updateDashboardCards() {
                const totalRevenueEl = document.getElementById('total-revenue');
                const netProfitEl = document.getElementById('net-profit');
                if (!totalRevenueEl) return;

                const totalReceitas = relatoriosData
                    .filter(r => r.type === 'Receita' && r.status === 'ativo') // 'ativo' = PAGO
                    .reduce((acc, r) => acc + r.value, 0);

                totalRevenueEl.textContent = `R$ ${totalReceitas.toFixed(2).replace('.', ',')}`;
                netProfitEl.textContent = `R$ ${totalReceitas.toFixed(2).replace('.', ',')}`; // Lucro = Receita (sem despesas)
            }
            
            async function populateSelects() {
                const alunos = await getAlunos(); // <-- Busca alunos reais do Asaas
                const customerSelect = document.getElementById('customerId');
                if (!customerSelect) return;
                // Usa o ID do Asaas como 'value'
                customerSelect.innerHTML = alunos.map(a => `<option value="${a.id}">${a.studentName}</option>`).join('');
            }
            
            function updateFormBasedOnType() {
                const type = transactionTypeSelect.value;
                const categorySelect = document.getElementById('category');
                const customerField = document.getElementById('customer-field');
                
                // Trava o formulário apenas em "Receita"
                if (type === 'Despesa') {
                    transactionTypeSelect.value = 'Receita'; // Força voltar para Receita
                    alert("Ainda não é possível adicionar despesas. Conecte um banco de dados primeiro.");
                    return;
                }

                // Lógica para Receita
                const revenueCategories = ['Mensalidade', 'Matrícula', 'Outras Receitas'];
                categorySelect.innerHTML = revenueCategories.map(c => `<option value="${c}">${c}</option>`).join('');
                customerField.style.display = 'block';
            }
            
            function handleReportAction(e) { /* ...Sua lógica de arquivar... */ }

            async function renderContent(tabId) {
                contentArea.removeEventListener('click', handleReportAction);
                // Sempre busca dados frescos do Asaas ao trocar de aba
                await fetchRelatorios(); 
                
                if (tabId === 'btn-dashboard') {
                    contentArea.innerHTML = dashboardTemplate;
                    setTimeout(() => {
                        setupCharts();
                        renderRecentActivity();
                        renderAlunos(); // Para atualizar o card de alunos
                        updateDashboardCards(); // Atualiza cards
                    }, 0);
                } else if (tabId === 'btn-alunos') {
                    contentArea.innerHTML = alunosTemplate;
                    renderAlunos();
                } else if (tabId === 'btn-relatorios') {
                    contentArea.innerHTML = relatoriosTemplate;
                    renderRelatorios('ativo');
                    document.getElementById('btn-novo-lancamento').addEventListener('click', () => {
                        addRevenueForm.reset();
                        updateFormBasedOnType();
                        novaReceitaModal.style.display = 'flex';
                    });
                    contentArea.addEventListener('click', handleReportAction);
                } else if (tabId === 'btn-historico') {
                    contentArea.innerHTML = historicoTemplate;
                    renderRelatorios('arquivado');
                    contentArea.addEventListener('click', handleReportAction);
                }
            }

            // --- EVENT LISTENERS ---
            if(profileToggle) { /* ... Lógica do dropdown do perfil ... */ }
            document.getElementById('close-nova-receita-modal').addEventListener('click', () => novaReceitaModal.style.display = 'none');
            document.getElementById('cancel-nova-receita-modal').addEventListener('click', () => novaReceitaModal.style.display = 'none');
            transactionTypeSelect.addEventListener('change', updateFormBasedOnType);

            // ATUALIZADO: Evento de submit para enviar dados ao BACKEND
            addRevenueForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(addRevenueForm);
                const data = Object.fromEntries(formData.entries());

                const body = {
                    tipo: data['transaction-type'],
                    valor: parseFloat(data.value),
                    data: data.date,
                    descricao: data.description,
                    categoria: data.category,
                    customerId: data.customerId // Este é o ID do Asaas
                };

                // Se não for Receita, para (embora a UI já trave)
                if (body.tipo !== 'Receita') return; 

                try {
                    // Envia para o nosso backend
                    const response = await fetch('/api/transacoes', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(body)
                    });

                    if (response.ok) {
                        novaReceitaModal.style.display = 'none';
                        const activeTab = document.querySelector('.nav-tab.active');
                        renderContent(activeTab.id); // Re-renderiza a aba atual
                    } else {
                        const error = await response.json();
                        alert(`Erro ao salvar: ${error.message}`);
                    }
                } catch (error) {
                    console.error("Erro no submit:", error);
                    alert('Erro de conexão ao salvar.');
                }
            });
            
            navTabs.forEach(tab => tab.addEventListener('click', (e) => {
                 navTabs.forEach(t => t.classList.remove('active'));
                 e.currentTarget.classList.add('active');
                 renderContent(e.currentTarget.id);
            }));

            // --- INICIALIZAÇÃO ---
            populateSelects(); // Popula o select de alunos
            document.getElementById('btn-dashboard').click(); // Começa na Visão Geral
        });
    </script>
    </body>
</html>